#include "gtest/gtest.h"
#include "share_util.h"
#include "../src/share_common_frame_impl.h"

TEST(WbxGraphicUtil,WbxAlphaBlend_FAIL_CASES)
{
    WBXByte pSrc[4*4][4] = {
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
    };

    WBXByte pDest[6*6][4] = {
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF}
    };

    WBXSize destSize(6,6),srcSize(4,4);
    WBXRect destRect(1,1,5,5),srcRect(0,0,4,4),errRect(0,0,5,5);
    WBXUInt nDestLineBytes=6*4,nSrcLineBytes=4*4;

    //NULL fail
    EXPECT_TRUE(WbxGraphicUtil::WbxAlphaBlend((WBXByte *)NULL, destSize, destRect, nDestLineBytes, WBXFalse, WBXTrue,
                (WBXByte *)pSrc, srcSize, srcRect, nSrcLineBytes, WBXFalse, WBXTrue)==WBXFalse);

    //same blend size area
    EXPECT_TRUE(WbxGraphicUtil::WbxAlphaBlend((WBXByte *)pDest, destSize, destRect, nDestLineBytes, WBXFalse, WBXTrue,
                (WBXByte *)pSrc, srcSize, errRect, nSrcLineBytes, WBXFalse, WBXTrue)==WBXFalse);
}
TEST(WbxGraphicUtil,WbxAlphaBlend_SUCESS_COMMON_COPY)
{
    WBXByte pSrc[4*4][4] = {
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
        {0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},
    };

    WBXByte pDest[6*6][4] = {
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
    };

    WBXSize destSize(6,6),srcSize(4,4),errSize(5,5);
    WBXRect destRect(1,1,5,5),srcRect(0,0,4,4);
    WBXUInt nDestLineBytes=6*4,nSrcLineBytes=4*4;

    WBXByte pDestExpect_1[6*6][4] = {
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0xFF,0xFF,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
    };
    EXPECT_TRUE(WbxGraphicUtil::WbxAlphaBlend((WBXByte *)pDest, destSize, destRect, nDestLineBytes, WBXFalse, WBXTrue,
                (WBXByte *)pSrc, srcSize, srcRect, nSrcLineBytes, WBXFalse, WBXTrue)==WBXTrue);
    EXPECT_TRUE(memcmp(pDest,pDestExpect_1,6*6*4)==0);

}

//Transparent
TEST(WbxGraphicUtil,WbxAlphaBlend_SUCESS_COMMON_TRANSPARENT)
{
    WBXByte pSrc[4*4][4] = {
        {0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},
        {0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},
        {0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},
        {0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},{0x01,0xFF,0xFF,0x00},
    };

    WBXByte pDest[6*6][4] = {
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
    };

    WBXSize destSize(6,6),srcSize(4,4),errSize(5,5);
    WBXRect destRect(1,1,5,5),srcRect(0,0,4,4);
    WBXUInt nDestLineBytes=6*4,nSrcLineBytes=4*4;

    WBXByte pDestExpect_1[6*6][4] = {
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
    };
    EXPECT_TRUE(WbxGraphicUtil::WbxAlphaBlend((WBXByte *)pDest, destSize, destRect, nDestLineBytes, WBXFalse, WBXTrue,
                (WBXByte *)pSrc, srcSize, srcRect, nSrcLineBytes, WBXFalse, WBXTrue)==WBXTrue);
    EXPECT_TRUE(memcmp(pDest,pDestExpect_1,6*6*4)==0);

}

//Blend
TEST(WbxGraphicUtil,WbxAlphaBlend_SUCESS_COMMON_BLEND)
{
    WBXByte pSrc[4*4][4] = {
        {0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},
        {0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},
        {0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},
        {0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},{0x01,0xFF,0xFF,0x10},
    };

    WBXByte pDest[6*6][4] = {
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
    };

    WBXSize destSize(6,6),srcSize(4,4),errSize(5,5);
    WBXRect destRect(1,1,5,5),srcRect(0,0,4,4);
    WBXUInt nDestLineBytes=6*4,nSrcLineBytes=4*4;

    //destA = 0xFF
    //destR = 0x01 * 0x10 / 0xFF + 0x01 * (0xFF - 0x10)/0xFF = 0x01
    //destG = 0xff * 0x10 / 0xFF + 0x22 * (0xFF - 0x10)/0xFF = 0x2f
    //destB = 0xff * 0x10 / 0xFF + 0x22 * (0xFF - 0x10)/0xFF = 0x2f
    WBXByte pDestExpect_1[6*6][4] = {
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x2f,0x2f,0xFF},{0x01,0x22,0x22,0xFF},
        {0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},{0x01,0x22,0x22,0xFF},
    };

    EXPECT_TRUE(WbxGraphicUtil::WbxAlphaBlend((WBXByte *)pDest, destSize, destRect, nDestLineBytes, WBXFalse, WBXTrue,
                (WBXByte *)pSrc, srcSize, srcRect, nSrcLineBytes, WBXFalse, WBXTrue)==WBXTrue);
    EXPECT_TRUE(memcmp(pDest,pDestExpect_1,6*6*4)==0);

}

TEST(WbxConfigUtil, ReadConfig)
{
    const char dummyConfigs[] = "{\"export raw data\": true, \
                                    \"dummy capture\": true, \
                                    \"dummy point\": true, \
                                    \"real point position\": true, \
                                    \"dummy enumerator\": true \
                                                   }";

    AppShareConfig::Instance().CheckConfig(dummyConfigs);
    bool bConfig;
    EXPECT_FALSE(AppShareConfig::Instance().GetConfigBool("export raw", bConfig) == WBXTrue);
    bConfig = false;
    EXPECT_TRUE(AppShareConfig::Instance().GetConfigBool("export raw data", bConfig) == WBXTrue);
    EXPECT_TRUE(bConfig);
    bConfig = false;
    AppShareConfig::Instance().GetConfigBool("dummy capture", bConfig);
    EXPECT_TRUE(bConfig);
    bConfig = false;
    AppShareConfig::Instance().GetConfigBool("dummy point", bConfig);
    EXPECT_TRUE(bConfig);
    bConfig = false;
    AppShareConfig::Instance().GetConfigBool("real point position", bConfig);
    EXPECT_TRUE(bConfig);
    bConfig = false;
    AppShareConfig::Instance().GetConfigBool("dummy enumerator", bConfig);
    EXPECT_TRUE(bConfig);
}
