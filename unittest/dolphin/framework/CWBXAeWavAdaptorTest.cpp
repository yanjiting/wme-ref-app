//
//  CWBXAeWavAdaptorTest.cpp
//  dolphinUnitTestApp
//
//  Created by Boris Lin on 14-10-15.
//  Copyright (c) 2014å¹´ WME. All rights reserved.
//
#include "gtest/gtest.h"
#include "gmock/gmock.h"
//#include "wbxmock.h"

#if defined(MX_IOS)
    #include "ios/WbxAeIPhoneUtility.h"
#endif

#define private     public
#define protected   public

#include "WBXAeWavAdaptor.h"

using testing::Return;
using testing::_;
using testing::Invoke;
using testing::ReturnRef;
using testing::Matcher;

const char g_TestDataForShort[] = {
    49,-3,-89,-3,121,-2,-47,-2,48,-1,-70,-1,-124,0,53,1,-33,1,69,2,-50,2,-127,3,-50,3,-37,3,-51,3,-103,3,-60,3,-34,3,-59,3,-59,3,-75,3,-101,3,54,3,-89,2,32,2,-41,1,83,1,-22,0,7,1,27,1,53,1,106,1,122,1,123,1,-104,1,-117,1,67,1,-87,0,41,0,-86,-1,46,-1,6,-1,-27,-2,-12,-2,109,-1,-97,-1,75,0,-36,0,-109,1,-119,2,86,3,3,4,-52,4,-96,5,42,6,-24,6,-65,7,-87,8,41,9,24,10,-54,10,73,11,-90,11,13,12,91,
    12,-95,12,-15,12,71,13,103,13,-46,13,-33,13,16,14,64,14,32,14,-55,13,-106,13,46,13,85,12,-76,11,-73,10,-48,9,-43,8,-44,7,-21,6,125,5,79,4,-48,2,80,1,-67,-1,51,-2,-15,-4,-98,-5,-93,-6,-96,-7,-103,-8,13,-8,62,-9,82,-10,-19,-12,127,-13,94,-14,3,-15,-8,-17,-28,-18,64,-18,-30,-19,-55,-19,-84,-19,3,-18,109,-18,-18,-18,-121,-17,26,-16,-42,-16,-57,-15,-36,-14,-25,-13,1,-11,-16,-11,53,-9,62,-8,34,-7,64,-6,-21,-6,-120,-5,78,-4,35,-3,-23,-3,115,
    -2,121,-1,75,0,32,1,-81,1,-18,1,-107,2,-11,2,82,3,-79,3,-62,3,-65,3,-65,3,-12,3,-30,3,-7,3,16,4,-12,3,-101,3,-117,3,-46,2,86,2,-6,1,-63,1,80,1,-26,0,48,1,64,1,69,1,64,1,97,1,44,1,-54,0,-125,0,-54,-1,74,-1,122,-2,47,-2,-14,-3,-76,-3,117,-3,126,-3,-53,-3,41,-2,-42,-2,-126,-1,-8,-1,-84,0,101,1,21,2,-128,2,-64,2,-118,3,27,4,-25,4,127,5,-9,5,74,6,121,6,-106,6,-34,6,25,7,63,7,17,7,23,
    7,-12,6,-10,6,-54,6,-85,6,-127,6,101,6,37,6,-124,5,-88,4,-2,3,27,3,122,2,-20,1,69,1,-85,0,54,0,-120,-1,-4,-2,-9,-3,36,-3,-99,-4,-4,-5,-77,-5,65,-5,10,-5,66,-5,-91,-5,21,-4,47,-4,40,-4,-3,-5,-67,-5,106,-5,5,-5,63,-6,0,-6,-54,-7,-73,-7,0,-6,-72,-6,61,-5,-43,-5,-100,-4,72,-3,-80,-3,30,-2,-3,-2,-41,-1,-82,0,-99,1,73,2,49,3,58,4,4,5,-81,5,-16,5,11,6,35,6,-99,6,16,7,97,7,-84,7,-17,7,107,
    8,-84,8,-53,8,-21,8,-67,8,36,8,-93,7,-13,6,23,6,-82,5,32,5,92,4,-125,3,-55,2,32,2,36,1,-46,-1,113,-2,108,-3,57,-4,-97,-5,20,-5,-95,-6,-19,-7,-60,-7,75,-7,42,-7,5,-7,-102,-8,44,-8,-103,-9,-32,-10,-22,-11,61,-11,56,-12,-40,-13,83,-13,40,-13,55,-13,-119,-13,19,-12,101,-12,2,-11,61,-11,-30,-11,113,-10,-29,-10,-91,-9,55,-8,-62,-8,79,-7,-28,-7,-63,-6,114,-5,42,-4,-70,-4,37,-3,-125,-3,40,-2,-78,-2,-24,-2,42,-1,22,0,-76,0,-97,
    1,89,2,63,3,-38,3,45,4,-127,4,-73,4,-29,4,49,5,115,5,126,5,100,5,110,5,-118,5,66,5,27,5,-118,4,-28,3,75,3,-54,2,67,2,-15,1,-53,1,-50,1,88,2,-102,2,6,3,-35,2,-118,2,-30,1,14,1,-84,0,-4,-1,78,-1,9,-1,-21,-2,64,-1,-75,-1,75,0,-73,0,36,1,123,1,-16,1,-128,2,67,3,70,4,0,5,-105,5,52,6,35,7,-32,7,-61,8,25,9,-94,9,29,10,127,10,-70,10,34,11,63,11,87,11,-108,11,-2,11,-4,11,58,12,102,
    12,122,12,-113,12,10,12,111,11,69,11,-19,10,96,10,-92,9,-23,8,-29,7,27,7,-10,5,-8,4,-40,3,109,2,62,1,22,0,-10,-2,3,-2,-40,-4,-62,-5,-19,-6,115,-6,-30,-7,67,-7,26,-8,21,-9,16,-10,-109,-12,-106,-13,-97,-14,-90,-15,-55,-16,69,-16,46,-16,80,-16,-126,-16,-57,-16,35,-15,115,-15,3,-14,-94,-14,-4,-14,-88,-13,39,-12,-59,-12,-58,-11,-27,-10,16,-8,96,-7,35,-6,-8,-6,-95,-5,63,-4,126,-4,1,-3,98,-3,-65,-3,29,-2,-99,-2,-9,-2,36,-1,85,-1,-117,
    -1,0,0,18,0,16,0,-1,-1,-8,-1,18,0,57,0,-23,-1,-78,-1,-101,-1,93,-1,6,-1,120,-2,-72,-3,68,-3,-16,-4,-31,-4,-14,-4,25,-3,119,-3,-58,-3,-5,-3,98,-2,-29,-3,-56,-3,111,-3,-15,-4,58,-4,-88,-5,-119,-5,-83,-5,-116,-5,-38,-5,109,-4,-55,-4,90,-3,64,-2,34,-1,-59,-1,-21,0,68,2,-69,3,81,4,-84,4,61,5,54,6,117,7,-42,8,24,10,-76,10,13,11,-47,11,14,12,118,12,-119,12,124,12,-101,12,-63,12,-98,13,-50,13,-28,13,-84,13,113,13,-32
};

//Raw data
const float g_TestDataForFloat[] = {
    0.015198,-0.004028,0.014679,-0.001434,-0.003967,-0.001617,-0.009949,-0.006134,0.002625,0.017303,-0.020416,0.024292,0.004303,-0.004028,0.005005,0.014435,-0.012573,-0.018219,0.002167,0.017395,-0.006958,-0.009735,0.031586,-0.008667,-0.014130,0.001312,0.016907,-0.034515,-0.004272,0.000824,0.005280,-0.004791,-0.010803,0.044128,-0.021423,0.000641,-0.001587,0.013611,-0.033936,0.016663,-0.000549,-0.010742,0.011169,0.009888,-0.007263,-0.017242,0.026245,-0.009338,0.002869,-0.057648,0.065399,-0.034729,0.017700,-0.031860,0.053986,-0.008148,-0.014801,0.009888,0.026642,-0.041351,0.019348,-0.002350,-0.002075,-0.016510,0.017273,0.013123,-0.038940,0.038330,-0.005127,-0.011871,-0.045166,0.046753,-0.018921,-0.029175,0.018158,0.030518,-0.044586,0.005493,0.027527,0.016022,-0.053986,0.053497,-0.016785,0.004028,-0.018494,0.022491,-0.009705,-0.015533,0.002838,0.043762,-0.065613,0.048950,-0.010864,0.005157,-0.020142,0.006744,0.028076,-0.035248,-0.015228,0.031494,0.020935,-0.066711,0.050659,0.016388,-0.020782,-0.025452,0.035645,-0.013641,-0.017700,0.011017,0.023895,-0.032471,0.020844,-0.010345,0.034241,-0.023743,0.003876,0.004639,0.026428,-0.048340,0.028259,0.014099,-0.041901,0.026215,-0.011475,-0.010162,0.040527,-0.041138,-0.019653,
    0.070129,-0.056519,-0.029602,0.065491,-0.032257,-0.002869,0.002930,0.053131,-0.045471,0.017670,0.031189,-0.006226,-0.034363,0.009094,0.049744,-0.060730,-0.004974,0.038940,-0.000427,-0.014832,-0.007050,0.044586,-0.019775,-0.046631,0.043854,-0.007263,-0.045624,0.031616,0.025909,-0.049652,0.011017,0.060028,-0.079437,0.075226,-0.062012,0.000366,0.040222,-0.020111,-0.032227,0.056213,-0.009247,-0.039124,0.053040,-0.017578,-0.049469,0.049805,-0.064697,0.058258,-0.050720,0.005402,0.069672,-0.075439,0.016418,0.060150,-0.036774,-0.019745,0.012878,-0.007233,-0.013733,0.010620,0.011475,-0.035767,0.039154,-0.016846,0.013641,-0.037994,0.006256,0.038208,-0.078705,0.011292,0.109467,-0.151245,0.053833,0.054199,-0.020416,-0.106171,0.112915,0.056030,-0.122559,-0.004456,0.085938,0.039154,-0.196350,0.172516,-0.046875,0.007538,-0.065521,0.104431,-0.068298,0.004608,0.060425,-0.052704,-0.017212,0.030609,0.045959,-0.083893,0.051392,-0.043488,0.078918,-0.105133,0.075226,-0.026642,0.027191,-0.045715,0.003540,0.102631,-0.136200,0.079895,-0.068573,0.084381,-0.074493,0.015930,0.026459,-0.032135,0.038177,0.011200,-0.031403,0.039948,0.027710,-0.098450,0.079102,-0.027557,0.087097,-0.179901,0.145996,-0.047760,-0.014313,-0.004883,
    0.009918,0.052429,-0.102051,0.130341,-0.117126,0.091522,-0.089020,0.074036,0.001007,-0.063690,0.092468,-0.061646,0.052124,-0.095673,0.154541,-0.165894,0.121735,-0.046722,0.000671,0.032562,0.004333,-0.067322,0.065552,0.002502,-0.078674,0.079895,-0.079285,0.080109,-0.123077,0.124176,-0.046082,-0.047394,0.048523,-0.012817,0.067352,-0.142853,0.172272,-0.090302,-0.044342,0.063446,-0.014221,-0.020142,0.003052,-0.026581,0.096527,-0.137451,0.071045,0.009552,-0.051208,0.008820,0.003143,0.068481,-0.123260,0.158142,-0.198029,0.190430,-0.100494,0.041656,-0.089508,0.108246,-0.013000,-0.121857,0.124817,-0.077209,0.111359,-0.135071,0.014587,0.111938,-0.103546,0.031097,-0.045624,0.080933,-0.083466,0.022186,0.000092,-0.018921,0.056976,-0.058197,-0.036835,0.137695,-0.081421,-0.006683,0.014679,0.041229,-0.017395,-0.086731,0.091492,0.028107,-0.087677,-0.037537,0.123383,-0.096161,0.027954,0.041504,-0.022552,-0.022278,0.049103,0.033112,-0.128937,0.069916,-0.000702,0.032593,-0.049744,-0.022858,0.091827,0.005096,-0.172363,0.178009,-0.036316,0.007568,-0.122192,0.145996,0.061340,-0.273346,0.287231,-0.150482,0.059113,-0.079773,0.047455,0.076019,-0.112183,0.062164,0.021179,0.020660,-0.100983,0.086273,-0.015289,-0.094452,
    0.093048,0.000427,-0.026093,-0.057953,0.162384,-0.049377,-0.071625,-0.033447,0.208435,-0.190063,-0.048920,0.139343,0.041351,-0.210815,0.138519,0.088562,-0.123352,-0.019928,0.044403,0.118378,-0.230804,0.196442,-0.129517,0.170135,-0.271759,0.224213,-0.057587,-0.101349,0.091919,-0.010345,0.007355,-0.094574,0.154633,-0.038513,-0.063202,-0.034607,0.144104,-0.113953,-0.001617,-0.002533,0.120178,-0.133270,0.013794,0.098572,-0.106171,0.080505,-0.083252,0.048553,0.014069,-0.095795,0.137238,-0.096466,0.047150,-0.027252,0.029694,-0.004150,-0.005798,0.014954,-0.033905,0.020508,0.042267,-0.058990,0.025452,0.020233,-0.078064,0.074524,-0.057556,0.021515,-0.001404,0.050903,-0.098633,0.043274,0.010071,-0.011841,0.023407,-0.147949,0.251770,-0.212189,0.141235,-0.060364,0.015167,0.033813,-0.079498,0.075531,-0.002899,-0.021790,-0.046204,0.086151,-0.078827,-0.042145,0.136139,-0.057281,-0.143066,0.231842,-0.204010,0.123871,0.009247,-0.100677,0.155121,-0.179810,0.204376,-0.121582,0.064850,-0.076447,0.029053,-0.024628,0.036102,0.033081,-0.146545,0.174774,-0.027496,-0.062744,-0.018097,0.133423,-0.143799,0.079163,-0.186523,0.281830,-0.205811,0.131805,-0.140656,0.203278,-0.191406,0.065125,0.113983,-0.151031,0.059814,0.017181,
    -0.027191,0.044373,-0.115387,0.214233,-0.252411,0.042084,0.126648,-0.029510,-0.089417,0.035065,0.123108,-0.090332,-0.098907,0.060974,0.188568,-0.287933,0.116180,0.035645,0.043579,-0.057983,-0.004120,0.050812,-0.084778,-0.008636,0.083435,-0.083435,-0.015289,0.153229,-0.131683,0.020477,-0.021606,0.161591,-0.188293,-0.024506,0.212891,-0.170441,0.130341,-0.149078,0.159454,-0.111389,0.001984,-0.034180,0.035889,0.103119,-0.129761,0.040283,0.038116,-0.052948,0.060059,-0.043457,-0.095734,0.181763,-0.160461,0.131287,-0.095428,0.035950,0.003723,-0.058441,0.079254,-0.020203,-0.024780,-0.001404,0.106934,-0.142151,0.131165,-0.099976,0.054474,-0.072296,0.021912,0.054382,-0.128601,0.173035,-0.147369,0.098175,-0.120850,0.214874,-0.197601,0.088104,-0.058319,0.056427,0.093292,-0.260620,0.241669,-0.103424,-0.013184,0.038879,-0.005798,-0.064240,0.131134,-0.142365,0.049438,0.016266,-0.112854,0.205383,-0.215515,0.177155,-0.066925,-0.012115,0.047760,0.025726,-0.117859,0.053802,0.014343,0.057556,-0.135132,0.032928,0.036438,-0.039856,0.027832,-0.044006,0.039551,-0.014954,0.061829,-0.056000,0.052917,-0.067963,0.041382,-0.033081,-0.049438,0.114594,-0.109314,0.077209,-0.057800,0.057831,0.009827,-0.033661,0.032715,-0.039856,
    0.033356,-0.067413,0.052094,0.056122,-0.090332,0.019226,0.014343,0.082703,-0.139832,-0.031799,0.214630,-0.199493,0.098907,-0.024048,0.051331,-0.048065,-0.029572,0.136658,-0.135040,-0.080841,0.178375,0.024170,-0.191010,0.096954,0.105286,-0.091156,-0.125244,0.237061,-0.114319,-0.077240,0.051300,0.071747,-0.031464,-0.125275,0.186462,-0.034027,-0.103455,0.044861,0.145294,-0.175903,-0.036530,0.168396,-0.127075,0.017822,0.058807,-0.081818,0.130920,-0.193390,0.193787,-0.039642,-0.146210,0.126862,-0.066406,0.015869,-0.066589,0.243713,-0.277069,0.175903,-0.007141,0.002197,-0.085480,0.070679,-0.064514,0.047882,-0.011169,0.053528,-0.028564,-0.064484,0.080109,-0.027893,-0.103821,0.082703,0.089508,-0.193726,0.134705,0.042694,-0.019348,-0.130249,0.091736,-0.050903,0.095947,-0.173859,0.172211,-0.023315,-0.041626,0.051941,0.070679,-0.171967,0.005066,0.100800,-0.053436,-0.041382,0.007660,0.106445,-0.062500,-0.094513,0.173859,-0.046783,-0.071442,0.011230,0.099121,-0.063141,-0.139679,0.201019,-0.097961,-0.009857,-0.038940,0.165894,0.008972,-0.217377,0.120544,0.069855,-0.102448,0.029633,-0.076996,0.117645,-0.070068,0.026093,0.058594,-0.111511,0.043304,0.032959,0.000885,-0.060120,0.033142,0.032135,0.038086,-0.120026,
    0.007751,0.102142,-0.099854,0.041077,-0.069397,0.092712,-0.071716,0.048218,0.037292,-0.091583,0.025879,0.047913,0.013062,-0.084839,-0.004761,0.119659,-0.067963,-0.112732,0.182556,-0.121552,0.149139,-0.220184,0.231293,-0.116272,-0.023651,0.129333,-0.121552,0.063904,-0.100983,0.125763,-0.079987,0.050049,-0.066071,0.074921,-0.062683,0.041046,0.094238,-0.188141,0.125427,-0.014771,-0.020477,-0.021027,0.002533,0.060059,0.027374,-0.263947,0.229309,0.060028,-0.112640,-0.099060,0.240540,-0.083557,-0.186066,0.150055,0.125488,-0.217438,-0.037964,0.195587,-0.084320,-0.081665,0.120880,-0.034943,0.028473,-0.065674,0.048187,0.015045,-0.032990,-0.062561,0.191772,-0.209503,0.014282,0.208313,-0.201080,-0.006958,0.044067,0.055664,-0.127533,0.144928,-0.091278,0.039307,0.000031,-0.032257,0.042877,-0.039734,0.037079,-0.037079,-0.008087,0.113098,-0.142548,0.095154,-0.015564,0.002899,-0.029053,-0.116089,0.281494,-0.238708,0.099091,-0.091827,0.112152,0.052246,-0.213348,0.198761,-0.092102,0.026123,-0.039307,0.008667,0.055450,-0.033844,0.023560,-0.054047,0.096924,-0.066437,0.039703,-0.043610,0.030701,0.025879,-0.134338,0.228088,-0.220062,0.098175,0.017609,-0.028503,-0.081482,0.178955,-0.139282,0.056580,0.045898,-0.134766,
    0.146301,-0.099701,0.045349,-0.026794,0.020538,-0.148163,0.309662,-0.264435,0.117340,0.034637,-0.148254,0.189484,-0.151306,0.043671,-0.050201,0.058807,-0.064636,0.108154,-0.106567,0.060608,0.087799,-0.171112,0.094513,-0.036469,0.126465,-0.273590,0.216522,-0.111206,0.097076,-0.053925,0.002686,0.013611,-0.063660,0.123932,-0.082489,0.010834,-0.036896,0.056488,0.095795,-0.227081,0.203857,-0.077026,0.006592,-0.028137,-0.108093,0.208282,-0.172089,0.098541,-0.002655,0.042480,-0.102600,0.108978,-0.062225,-0.010376,0.054443,-0.099670,0.057129,-0.027252,-0.000275,0.006592,-0.027924,0.047485,-0.070007,0.158997,-0.175293,0.131653,-0.043060,-0.044250,0.070892,-0.005188,-0.048828,0.030304,-0.002808,-0.035278,0.044342,0.013794,-0.082916,-0.006073,0.054413,-0.028992,0.036713,-0.072968,0.136536,-0.125488,0.047913,-0.007629,0.047455,0.013214,-0.114746,0.084259,0.013214,-0.002136,-0.140472,0.133484,-0.040649,0.047333,-0.082642,-0.031525,0.154480,-0.072845,-0.042389,0.053406,-0.026062,0.053986,-0.050446,0.022644,-0.032135,0.054688,-0.013885,-0.069427,0.053253,-0.028107,0.118317,-0.133362,0.018890,0.090790,-0.029816,-0.054077,-0.011017,0.031189,0.047699,-0.071198,-0.011963,0.057709,-0.009521,-0.054352,0.024323,0.075378
};



////////////////////////////////////////////////////
//////////CWBXAeWavAdaptorTest///////////////////////
class CWBXAeWavAdaptorTest : public testing::Test
{
public:
    CWBXAeWavAdaptorTest()
    {
        m_bHasPrivilege = false;
        m_nWriteTimes = 32;
        m_FmtForshort.wFormatTag = 1;
        m_FmtForshort.dwSamplesPerSec = 16000;
        m_FmtForshort.wBitsPerSample = 16;
        m_FmtForshort.wChannels = 1;
        m_FmtForshort.wBlockAlign = 2;
        m_FmtForshort.dwAvgBytesPerSec = 32000;
        
        m_FmtForfloat.wFormatTag = 3;
        m_FmtForfloat.dwSamplesPerSec = 16000;
        m_FmtForfloat.wBitsPerSample = 32;
        m_FmtForfloat.wChannels = 1;
        m_FmtForfloat.wBlockAlign = 4;
        m_FmtForfloat.dwAvgBytesPerSec = 64000;
    }
    
    virtual ~CWBXAeWavAdaptorTest()
    {
        if (!m_sDataDumpPath.empty() && m_sDataDumpPath.length() > 0)
            remove(m_sDataDumpPath.data());
    }
    
    virtual void SetUp()
    {
#if defined(WIN32)
        m_sDataDumpPath = ".\\";
#elif defined(ANDROID)
        m_sDataDumpPath = "/sdcard/WebExMediaEngine/";
#elif defined(IOS_SIMULATOR)
        m_sDataDumpPath = "/tmp/";
#elif defined(MX_IOS)
        unsigned char sPath[1024] = "";
        unsigned long uPathLen = 1024;
        if(0 == WbxAeGetDocumentPath(sPath, uPathLen))
        {
            m_sDataDumpPath.assign((char*)sPath, uPathLen);
            m_sDataDumpPath.append("/");
        }
        else
        {
            m_sDataDumpPath = "/tmp/";
        }
#elif defined(MACOS) || defined(UNIX)
        m_sDataDumpPath  = "/tmp/";
#else
        m_sDataDumpPath  = "./";
#endif
        
        m_sDataDumpPath += "WavAdaptorTest.wav";
        
        FILE *fp = fopen(m_sDataDumpPath.data(),"wb+");
        if (fp != NULL)
        {
            m_bHasPrivilege = true;
            fclose(fp);
        }
        else
            m_bHasPrivilege = false;
    }
    
    virtual void TearDown()
    {
		
    }
private:
    WAVE_FORMAT m_FmtForshort;
    WAVE_FORMAT m_FmtForfloat;
    CWBXAeWavWriter     m_wbxWavWriter;
    CWBXAeWavReader     m_wbxWavReader;
    std::string m_sDataDumpPath;
    int         m_nWriteTimes;
    bool        m_bHasPrivilege;
};


TEST_F(CWBXAeWavAdaptorTest, Test_Wav_Adaptor_Short)
{
    EXPECT_TRUE((m_wbxWavWriter.Init(m_FmtForshort) == WBX_AE_WAV_ADAPTOR_SUCCESS));
    EXPECT_TRUE((m_wbxWavWriter.m_bInited == true));
    if (m_bHasPrivilege == false)
        return;
    
    if (!m_sDataDumpPath.empty() && m_sDataDumpPath.length() > 0)
    {
        remove(m_sDataDumpPath.data());
        
        for (int i = 0; i < m_nWriteTimes; i++)
            EXPECT_EQ(WBX_AE_WAV_ADAPTOR_SUCCESS, m_wbxWavWriter.DumpDataToWavFile(m_sDataDumpPath.data(), (char *)g_TestDataForShort, sizeof(g_TestDataForShort)));
        
        FILE *fp = fopen(m_sDataDumpPath.data(),"rb");
        if (fp != NULL)
        {
            EXPECT_EQ(WBX_AE_WAV_ADAPTOR_SUCCESS, m_wbxWavWriter.IsVaildWavFile(fp));
            fclose(fp);
        }
    }
    
    if (!m_sDataDumpPath.empty() && m_sDataDumpPath.length() > 0)
    {
        EXPECT_EQ(WBX_AE_WAV_ADAPTOR_SUCCESS,m_wbxWavReader.ReadWavFromFile(m_sDataDumpPath.data(),m_FmtForshort));
    }

    int nBufLen = sizeof(g_TestDataForShort);
    char *szBuf = new char[nBufLen + 1];
    int nTotal = 0;
    for (int i = 0; i < m_nWriteTimes; i++)
    {
        memset(szBuf,0,nBufLen + 1);
        int nRead = m_wbxWavReader.RequestPCMData(szBuf, nBufLen);
        EXPECT_TRUE(nRead >= 0);
        nTotal += nRead;
    }
    delete[] szBuf;
    szBuf = NULL;
    EXPECT_TRUE(nTotal == sizeof(g_TestDataForShort) * m_nWriteTimes);
    if (m_wbxWavReader.m_pWavFileR != NULL)
        fclose(m_wbxWavReader.m_pWavFileR);
    m_wbxWavReader.m_pWavFileR = NULL;
    
}

TEST_F(CWBXAeWavAdaptorTest, Test_Wav_Adaptor_Float)
{
    EXPECT_TRUE((m_wbxWavWriter.Init(m_FmtForfloat) == WBX_AE_WAV_ADAPTOR_SUCCESS));
    EXPECT_TRUE((m_wbxWavWriter.m_bInited == true));
    if (m_bHasPrivilege == false)
        return;
    if (!m_sDataDumpPath.empty() && m_sDataDumpPath.length() > 0)
    {
        remove(m_sDataDumpPath.data());
        for (int i = 0; i < m_nWriteTimes; i++)
            EXPECT_EQ(WBX_AE_WAV_ADAPTOR_SUCCESS, m_wbxWavWriter.DumpDataToWavFile(m_sDataDumpPath.data(), (float *)g_TestDataForFloat, sizeof(g_TestDataForFloat)));
        
        FILE *fp = fopen(m_sDataDumpPath.data(),"rb");
        if (fp != NULL)
        {
            EXPECT_EQ(WBX_AE_WAV_ADAPTOR_SUCCESS, m_wbxWavWriter.IsVaildWavFile(fp));
            fclose(fp);
        }
    }
    
    if (!m_sDataDumpPath.empty() && m_sDataDumpPath.length() > 0)
    {
        EXPECT_EQ(WBX_AE_WAV_ADAPTOR_SUCCESS,m_wbxWavReader.ReadWavFromFile(m_sDataDumpPath.data(),m_FmtForfloat));
    }

    int nBufLen = sizeof(g_TestDataForFloat);
    float *szBuf = new float[nBufLen + 1];
    int nTotal = 0;
    for (int i = 0; i < m_nWriteTimes; i++)
    {
        memset(szBuf,0,(nBufLen + 1) * sizeof(float));
        int nRead = m_wbxWavReader.RequestPCMData(szBuf, nBufLen);
        EXPECT_TRUE(nRead >= 0);
        nTotal += nRead;
    }
    delete[] szBuf;
    szBuf = NULL;
    EXPECT_TRUE(nTotal == sizeof(g_TestDataForFloat) * m_nWriteTimes);
    if (m_wbxWavReader.m_pWavFileR != NULL)
        fclose(m_wbxWavReader.m_pWavFileR);
    m_wbxWavReader.m_pWavFileR = NULL;

}




